<!DOCTYPE html>
<html>
  <head>
    <script type="text/javascript" src="/vendor/jquery-3.0.0.js"></script>
    <script src="routes/mapDisplayTest.js"></script>

    <title>Map Test: Sushi</title>
    <h2 class="mapName">Editing: <%= title %></h2>
    <p id="mapIdentity"><%= mapId %></p>
    <p id="locationcenter"><%= mapLocation %></p>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <meta charset="utf-8" />
    <style>
      /* Always set the map height explicitly to define the size of the div
     * element that contains the map. */
      #map {
        height: 100%;
        background-color: grey;
      }

      /* Optional: Makes the sample page fill the window. */
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }

      /* TODO: Step 4A1: Make a generic sidebar */
      /* Styling for an info pane that slides out from the left.
    * Hidden by default. */
      #panel {
        height: 100%;
        width: null;
        background-color: white;
        position: fixed;
        z-index: 1;
        overflow-x: hidden;
        transition: all 0.2s ease-out;
      }

      .open {
        width: 250px;
      }

      /* Styling for place details */
      .hero {
        width: 100%;
        height: auto;
        max-height: 166px;
        display: block;
      }

      .place,
      p {
        font-family: "open sans", arial, sans-serif;
        padding-left: 18px;
        padding-right: 18px;
      }

      .details {
        color: darkslategrey;
      }

      a {
        text-decoration: none;
        color: cadetblue;
      }
    </style>
  </head>

  <body>
    <div id="searchBar">
      <form id="searchForm">
        <div class="form-group">
          <input
            id="keywordInput"
            class="form-control"
            type="text"
            name="keyword"
            placeholder="search for..."
            style="width: 300px"
          />
        </div>
        <div class="form-group">
          <input
            id="locationInput"
            class="form-control"
            type="text"
            name="place"
            placeholder="location"
            style="width: 300px"
          />
        </div>
        <button type="submit" class="btn btn-primary">Search Places</button>
      </form>
    </div>
    <!-- TODO: Step 4A2: Add a generic sidebar -->
    <!-- The slide-out panel for showing place details -->
    <div id="panel"></div>

    <!-- Map appears here -->
    <div id="map"></div>

    <!-- TODO: Step 1B, Add a map -->
    <script>
      /* Note: This example requires that you consent to location sharing when
       * prompted by your browser. If you see the error "Geolocation permission
       * denied.", it means you probably did not give permission for the browser * to locate you. */

      /* TODO: Step 2, Geolocate your user
       * Replace the code from here to the END TODO comment with this code
       * from codelab instructions. */
      let pos;
      let map;
      let bounds;
      let infoWindow;
      let selectedPlace;
      let currentInfoWindow;
      let service;
      let infoPane;
      let GeocoderResult;
      let geocoder;
      function initMap() {
        // Initialize variables
        bounds = new google.maps.LatLngBounds();
        infoWindow = new google.maps.InfoWindow();
        currentInfoWindow = infoWindow;
        /* TODO: Step 4A3: Add a generic sidebar */
        infoPane = document.getElementById("panel");
        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 15,
        });

        infoWindow.open(map);

        geoFunc("", document.getElementById("locationcenter").innerText);
      }

      function geoFunc(keyword, location) {
        geocoder = new google.maps.Geocoder();
        // const urlSearchParams = new URLSearchParams(window.location.search);
        // const params = Object.fromEntries(urlSearchParams.entries());
        // console.log(params);
        geocoder.geocode({ address: location }).then((result) => {
          const { results } = result;
          pos = results[0].geometry.location;
          infoWindow.setPosition(pos);
          infoWindow.setContent("Searching near here.");
          map.setCenter(pos);

          /* TODO: Step 3B2, Call the Places Nearby Search */
          // Call Places Nearby Search on user's location
          getNearbyPlaces(pos, keyword);
        });
      }

      //Search Form Submit event

      window.addEventListener("DOMContentLoaded", (event) => {
        let p = $("#searchForm");
        console.log(p);
        p.on("submit", (event) => {
          event.preventDefault();
          let test = $("#keywordInput").val();
          let poop = $("#locationInput").val();
          geoFunc(test, poop);
        });
        console.log("DOM fully loaded and parsed");
      });

      /* END TODO: Step 2, Geolocate your user */
      /* TODO: Step 3B1, Call the Places Nearby Search */
      // Perform a Places Nearby Search Request
      function getNearbyPlaces(position, keyword) {
        let request = {
          location: position,
          rankBy: google.maps.places.RankBy.DISTANCE,
          keyword: keyword || "",
        };
        console.log(request.keyword);

        service = new google.maps.places.PlacesService(map);
        service.nearbySearch(request, nearbyCallback);
      }

      // Handle the results (up to 20) of the Nearby Search
      function nearbyCallback(results, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          createMarkers(results);
        }
      }

      /* TODO: Step 3C, Generate markers for search results */
      // Set markers at the location of each place result
      function createMarkers(places) {
        places.forEach((place) => {
          let marker = new google.maps.Marker({
            position: place.geometry.location,
            map: map,
            title: place.name,
          });

          /* TODO: Step 4B: Add click listeners to the markers */
          // Add click listener to each marker
          google.maps.event.addListener(marker, "click", () => {
            map.setZoom(16);
            map.setCenter(marker.getPosition());
            let request = {
              placeId: place.place_id,
              fields: [
                "name",
                "formatted_address",
                "geometry",
                "rating",
                "website",
                "photos",
              ],
            };
            selectedPlace = place;
            console.log(place);

            /* Only fetch the details of a place when the user clicks on a marker.
             * If we fetch the details for all place results as soon as we get
             * the search response, we will hit API rate limits. */
            service.getDetails(request, (placeResult, status) => {
              showDetails(placeResult, marker, status);
              $.ajax({
                type: "GET",
                url:
                  "/newmarker/map/" +
                  document.getElementById("mapIdentity").innerText +
                  "/marker",
                data: {
                  lng: selectedPlace.geometry.location.lng,
                  lat: selectedPlace.geometry.location.lat,
                  place_id: selectedPlace.place_id,
                },
                success: function (data) {
                  console.log("----", data);
                  /// adjust to account for user id/login both marker/user
                  selectedPlace.marker_id = data[0]["id"];
                },
              });
            });
          });

          // Adjust the map bounds to include the location of this marker
          bounds.extend(place.geometry.location);
        });
        /* Once all the markers have been placed, adjust the bounds of the map to
         * show all the markers within the visible area. */
        map.fitBounds(bounds);
      }

      /* TODO: Step 4C: Show place details in an info window */
      // Builds an InfoWindow to display details above the marker
      function showDetails(placeResult, marker, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          let placeInfowindow = new google.maps.InfoWindow();
          placeInfowindow.setContent(
            "<div><strong>" +
              placeResult.name +
              "</strong><br>" +
              "Rating: " +
              placeResult.rating +
              "</div>"
          );
          placeInfowindow.open(marker.map, marker);
          currentInfoWindow.close();
          currentInfoWindow = placeInfowindow;
          showPanel(placeResult);
        } else {
          console.log("showDetails failed: " + status);
        }
      }

      /* TODO: Step 4D: Load place details in a sidebar */
      // Displays place details in a sidebar
      function showPanel(placeResult) {
        // If infoPane is already open, close it
        if (infoPane.classList.contains("open")) {
          infoPane.classList.remove("open");
        }

        // Clear the previous details
        while (infoPane.lastChild) {
          infoPane.removeChild(infoPane.lastChild);
        }

        /* TODO: Step 4E: Display a Place Photo with the Place Details */
        // Add the primary photo, if there is one
        if (placeResult.photos != null) {
          let firstPhoto = placeResult.photos[0];
          let photo = document.createElement("img");
          photo.classList.add("hero");
          photo.src = firstPhoto.getUrl();
          infoPane.appendChild(photo);
        }

        // Add place details with text formatting
        let name = document.createElement("h1");
        name.classList.add("place");
        name.textContent = placeResult.name;
        infoPane.appendChild(name);
        if (placeResult.rating != null) {
          let rating = document.createElement("p");
          rating.classList.add("details");
          rating.textContent = `Rating: ${placeResult.rating} \u272e`;
          infoPane.appendChild(rating);
        }
        let address = document.createElement("p");
        address.classList.add("details");
        address.textContent = placeResult.formatted_address;
        infoPane.appendChild(address);
        if (placeResult.website) {
          let websitePara = document.createElement("p");
          let websiteLink = document.createElement("a");
          let websiteUrl = document.createTextNode(placeResult.website);
          websiteLink.appendChild(websiteUrl);
          websiteLink.title = placeResult.website;
          websiteLink.href = placeResult.website;
          websitePara.appendChild(websiteLink);
          infoPane.appendChild(websitePara);
        }

        //code for button click

        let map1 = document.createElement("button");
        map1.addEventListener("click", function (event, mapId) {
          $.post(
            "/newmarker/map/" +
              document.getElementById("mapIdentity").innerText +
              "/marker",
            {
              title: selectedPlace.name,
              lng: selectedPlace.geometry.location.lng,
              lat: selectedPlace.geometry.location.lat,
              place_id: selectedPlace.place_id,
            },
            function (data, status) {
              selectedPlace.marker_id = data;
              alert("Data: " + data + "\nStatus: " + status);
            }
          );
        });
        map1.textContent = "Add to Map";
        infoPane.appendChild(map1);

        //Delete Marker
        let deletemarker = document.createElement("button");
        deletemarker.addEventListener("click", function (event) {
          // console.log(selectedPlace);
          console.log("click is being ran event");
          console.log(selectedPlace.marker_id);
          $.post(
            //need to account for user
            `/deletemarker/map/delete/${selectedPlace.marker_id}`,
            function (data, status) {
              alert("Data: " + data + "\nStatus: " + status);
            }
          );
        });

        deletemarker.textContent = "Delete marker from map";
        infoPane.appendChild(deletemarker);

        // Open the infoPane
        infoPane.classList.add("open");
      }
    </script>

    <!-- TODO: Step 1C, Get an API key -->
    <!-- TODO: Step 3A, Load the Places Library -->
    <script
      async
      defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyClwBEZi_qKRMndsCwxQ-Ewl7rfUinQFcQ&libraries=places&callback=initMap"
    ></script>
  </body>
</html>
